package lyc.compiler;

import java_cup.runtime.*;

class Parser;

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal COLON;
terminal COMMA;
terminal AND;
terminal OR;
terminal NOT;
terminal READ;
terminal IF;
terminal ELSE;
terminal GREATER_THAN;
terminal GREATER_THAN_OR_EQUAL;
terminal LESS_THAN;
terminal LESS_THAN_OR_EQUAL;

terminal IDENTIFIER;

terminal WRITE;
terminal INIT;
terminal INT;
terminal STRING;
terminal FLOAT;

// Non Terminals
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;

non terminal init_sentence;
non terminal init_line;
non terminal var_list;
non terminal var_type;
non terminal write_sentence;
non terminal write_line;
non terminal read_sentence;
non terminal read_line;

// Start Symbol Definition
start with sentence;

// Write
sentence ::= write_sentence {: System.out.println("WRITE"); :};
sentence ::= write_sentence sentence {: System.out.println("WRITE"); :};
write_sentence ::= WRITE OPEN_BRACKET write_line CLOSE_BRACKET {: System.out.println("Bloque WRITE"); :};
write_line ::= IDENTIFIER:id {: System.out.println("Write: " + id); :};
write_line ::= STRING_CONSTANT:constant {: System.out.println("Write: " + constant); :};

// Read
sentence ::= read_sentence {: System.out.println("READ"); :};
sentence ::= read_sentence sentence {: System.out.println("READ"); :};
read_sentence ::= READ OPEN_BRACKET read_line CLOSE_BRACKET {: System.out.println("Bloque READ"); :};
read_line ::= IDENTIFIER:id {: System.out.println("Read: " + id); :};

// Assignments and expressions
sentence ::= assignment {: System.out.println("End"); :};
sentence ::= assignment sentence {: System.out.println("End"); :};
assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};
assignment ::= IDENTIFIER ASSIG STRING_CONSTANT:constant {: System.out.println("Assignment: "+ constant); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= FLOAT_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};

// Init
sentence ::= init_sentence {: System.out.println("INIT"); :};
init_sentence ::= INIT OPEN_CURLY_BRACKET init_line CLOSE_CURLY_BRACKET {: System.out.println("Bloque INIT"); :};
init_line ::=  var_list COLON var_type init_line {: System.out.println("Linea declaracion de variables INIT"); :};
init_line ::=  var_list COLON var_type {: System.out.println("Ultima Linea declaracion de variables INIT"); :};
var_list ::= IDENTIFIER: id COMMA var_list {: System.out.println("Variable: "+id); :};
var_list ::= IDENTIFIER: id {: System.out.println("Variable: "+id); :};
var_type ::= STRING {: System.out.println("STRING"); :};
var_type ::= INT {: System.out.println("INT"); :};
var_type ::= FLOAT {: System.out.println("FLOAT"); :};